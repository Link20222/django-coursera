    Model-Url-View-Template
TIPS:
    PART 1 - create project & app
1. $ django-admin startproject polldj
2. $ python manage.py startapp polls
3. $ python manage.py migrate
3. The 'migrate' command looks at the 'INSTALLED_APPS' setting and creates any necessary database tables

    PART 2 - setup db, create model, admin site
4. Then create your models
4. Activating models, with models Django able to:
 - Create a database schema (CREATE TABLE statements) for this app.
 - Create a Python database-access API for accessing 'Question' and 'Choice' objects.
5. Include the app in your project from 'INSTALLED_APPS' list
6. $ python manage.py makemigrations polls
6. $ python manage.py sqlmigrate polls 0001
7. Change your models (in models.py):
 - Run '$ python manage.py makemigrations' to create migrations for those changes
 - Run '$ python manage.py migrate' to apply those changes to the database
8. Playing with the API (models=data): '$ python manage.py shell'
 - https://docs.djangoproject.com/en/3.0/intro/tutorial02/#playing-with-the-api
9. Django Admin
9. Creating an admin user: '$ python manage.py createsuperuser'

    PART 3 - Creating "views", "urls", and using "templates"
10. https://docs.djangoproject.com/en/3.0/intro/tutorial03/
11. Write views which really do something, do not apply any design to them, write urls which must be changed only from 'urls.py' - {% url 'polls:detail' question.id %}
12. write app_name in each 'urls.py'

    PART 4 - forms - class based views (or generic views)
13. https://docs.djangoproject.com/en/3.0/intro/tutorial04/
14. <form action="{% url 'polls:vote' question.id %}" method="post">
 - Here action is going from "detail.html" to the 'polls/urls.py' "vote.html"
15. Whenever you create a form that alters data server-side, use method="post"
16. All POST forms that are targeted at internal URLs should use the {% csrf_token %} template tag.
17. Race conditions (Avoiding race conditions using F())
18. Class based views
 - https://docs.djangoproject.com/en/3.0/intro/tutorial04/#use-generic-views-less-code-is-better
 - change urls
 - context_object_name

    PART 5 - tests
    https://docs.djangoproject.com/en/3.0/intro/tutorial05/
19. $ python manage.py test polls

    PART 6 - static files (css, js, images)
20.  STATICFILES_FINDERS -> AppDirectoriesFinder
21. {% load static %}
 <link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}">

    PART 7 - customizing the admin site
22. https://docs.djangoproject.com/en/3.0/intro/tutorial07/

    REFERENCES:
1. About q.choice_set.all(): https://docs.djangoproject.com/en/3.0/ref/models/relations/
2. About __startswith, __endswith ... https://docs.djangoproject.com/en/3.0/topics/db/queries/#field-lookups-intro
3. Database API: https://docs.djangoproject.com/en/3.0/topics/db/queries/
4. INTERNATIONALIZATION: https://docs.djangoproject.com/en/3.0/topics/i18n/translation/
5. FORMS https://docs.djangoproject.com/en/3.0/topics/forms/
6. CLASS BASED VIEWS: https://docs.djangoproject.com/en/3.0/topics/class-based-views/
7. STATIC: https://docs.djangoproject.com/en/3.0/howto/static-files/

